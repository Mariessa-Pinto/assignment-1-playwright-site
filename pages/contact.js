import Head from 'next/head'
import { Inter } from '@next/font/google'
import styles from '@/styles/Contact.module.css'
import { useRef, useState } from 'react';
import Navbar from '../components/Navbar/navbar'
import UpArrow from '../components/UpArrow/upArrow'
import { useRouter } from 'next/navigation';

const inter = Inter({ subsets: ['latin'] })

export default function Contact() {
  const [errorVal, setErrorVal] = useState(false);
  const [errorLastVal, setErrorLastVal] = useState(false);
  const [errorMailVal, setErrorMailVal] =useState(false);

  const [firstName, setFirstName] = useState('');
  const [error, setError] = useState(false);
  const ref = useRef();
  const handleChange = (event) => {
    const newValueIsValid = !event.target.validity.patternMismatch;
    if(error) {
      if (newValueIsValid) {
        setError(false);
        setErrorVal(false);
      }
    }
    setFirstName(event.target.value);
  };
  const handleBlur = (event) => {
    if (!error) {
      if (event.target.validity.patternMismatch) {
        ref.current.focus();
        setError(true);
        setErrorVal(true);
      }
    }
  };

  const [lastName, setLastName] = useState('');
  const [errorLast, setErrorLast] = useState(false);
  const refLast = useRef();
  const handleChangeLast = (eventLast) => {
    const newValueIsValidLast = !eventLast.target.validity.patternMismatch;
    if(errorLast) {
      if (newValueIsValidLast) {
        setErrorLast(false);
        setErrorLastVal(false);
      }
    }
    setLastName(eventLast.target.value);
  };

  const handleBlurLast = (eventLast) => {
    if (!errorLast) {
      if (eventLast.target.validity.patternMismatch) {
        refLast.current.focus();
        setErrorLast(true);
        setErrorLastVal(true);
      }
    }
  };

  const [email, setEmail] = useState('');
  const [errorMail, setErrorMail] = useState(false);
  const refMail = useRef();
  const handleChangeMail = (eventMail) => {
    const newValueIsValidMail = !eventMail.target.validity.patternMismatch;
    if(errorMail) {
      if (newValueIsValidMail) {
        setErrorMail(false);
        setErrorMailVal(false);
      }
    }
    setEmail(eventMail.target.value);
  };

  const handleBlurMail = (eventMail) => {
    if (!errorMail) {
      if (eventMail.target.validity.patternMismatch) {
        refMail.current.focus();
        setErrorMail(true);
        setErrorMailVal(true); 
      }
    }
  };

  const placeholderTextName = 'First Name Here';
  const placeholderTextLastName = 'Last Name Here';
  const placeholderTextEmail = 'Email Here';
  const router = useRouter();

  
    return (
      <>
        <Head>
          <title>Contact Us</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <meta name="author" content="MDIA 2109"/>
          <meta property="og:title" content='Assignment #1 - Contact Us Page'/>
          <meta property="og:description" content='BCIT Digital Design and Development Diploma'/>
          <link rel="icon" href="/favicon.png" />
        </Head>
        <main className={styles.main}>
          <Navbar/>
            <div className={styles.header}>
                    <div className={styles.line}></div>
                        <h1>Contact Us</h1>
                    <div className={styles.line}></div>
              </div>
            <div className={styles.subheader}>
                <p>Want to discuss? Lets chat!</p>
            </div>
            <div className={styles.form}>
                <form className={styles.formWidth}>
                  <fieldset className={styles.border}>
                    <table className={styles.topRowStyle}>
                      <thead>
                        <tr className={styles.topRow}>
                          <th className={styles.labelAndInputLeft}>
                            <label for="firstName">First name:</label><br/>
                            <input
                              // {
                              //   const isEmnpty = input.value.length;
                              // }
                              className={styles.input}
                              value={firstName}
                              type="text"
                              id="firstName" 
                              name="firstName"
                              onBlur={handleBlur}
                              ref={ref}
                              required
                              minLength="1"
                              pattern ="^[A-Z]{1}[a-z]{2,15}$"
                              title="First name error. First letter must be capital. Must use alphabets only."
                              onChange={handleChange}
                              placeholder={placeholderTextName}
                            />
                          </th>
                          <th className={styles.labelAndInputRight}>
                            <label for="lastName">Last name:</label><br/>
                            <input
                              className={styles.input}
                              value={lastName}
                              type="text"
                              id="lastName" 
                              name="lastName"
                              onBlur={handleBlurLast}
                              ref={refLast}
                              required
                              minLength="1"
                              pattern ="[A-Z]{1}[a-z]{2,15}"
                              title="Last name error. First letter must be capital. Must use alphabets only."
                              onChange={handleChangeLast}
                              placeholder={placeholderTextLastName}
                            />
                          </th>
                        </tr>
                      </thead>
                      <thead>
                        <tr>
                          <th className={styles.labelAndInputEmail}>
                            <label for="email">Email:</label><br/>
                            <input
                              className={styles.inputEmail}
                              value={email}
                              type="email"
                              id="email" 
                              name="email"
                              onBlur={handleBlurMail}
                              ref={refMail}
                              required
                              minLength="1"
                              pattern ="[a-z]{2,9}@[a-z]{2,8}[\.]{1}[a-z]{2,3}"
                              title="Email is invalid"
                              onChange={handleChangeMail}
                              placeholder={placeholderTextEmail}
                            />
                          </th>
                        </tr>
                      </thead>
                    </table>
                  </fieldset>
                  {
                    error && (
                      <p role="alert" style={{ color: "darkred", fontWeight: "700" }}>
                        First name error. First letter must be capital. Must use alphabets only.
                      </p>
                    )
                  }
                  {
                    errorLast && (
                      <p role="alert" style={{ color: "darkred", fontWeight: "700" }}>
                        Last name error. First letter must be capital. Must use alphabets only.
                      </p>
                    )
                  }
                  {
                    errorMail && (
                      <p role="alert" style={{ color: "darkred", fontWeight: "700" }}>
                        Email is invalid
                      </p>
                    )
                  }
                <div 
                className={` ${ !errorMailVal && !errorLastVal && !errorVal ? `${styles.opacityButtonLayout}` : `${styles.opacity}` } `}>
                <button
                  className={styles.button}
                  onClick={() => router.push('/')}
                  type="button"
                  >Submit</button>
                </div>
                </form>
            </div>
            <div className={styles.arrow}>
              <a href='/about'><UpArrow/></a>
            </div>
        </main>
      </>
    )
  }
  